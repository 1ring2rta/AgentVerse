{
  "available_envs": [
    {
      "name": "WebEnv",
      "description": "Web Environment providing web interface and browsering.\n    ",
      "total_tools": 1,
      "tools": [
        "browse_website"
      ]
    },
    {
      "name": "FileSystemEnv",
      "description": "Provide a file system operation environment for Agent.\n    ",
      "total_tools": 6,
      "tools": [
        "append_to_file",
        "is_path_exist",
        "modify_file",
        "print_filesys_struture",
        "read_from_file",
        "write_to_file"
      ]
    },
    {
      "name": "ShellEnv",
      "description": "Provide and maintain an interactive shell environment.\n    ",
      "total_tools": 2,
      "tools": [
        "read_stdout",
        "write_stdin"
      ]
    }
  ],
  "available_tools": [
    "WebEnv_browse_website",
    "FileSystemEnv_append_to_file",
    "FileSystemEnv_is_path_exist",
    "FileSystemEnv_modify_file",
    "FileSystemEnv_print_filesys_struture",
    "FileSystemEnv_read_from_file",
    "FileSystemEnv_write_to_file",
    "ShellEnv_read_stdout",
    "ShellEnv_write_stdin",
    "run_interpreter",
    "bing_search"
  ],
  "tools_json": [
    {
      "name": "WebEnv_browse_website",
      "description": "Browse a website and return the page. Note some websites may not be accessable due to network error.",
      "parameters": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The realworld URL to scrape text from. Started with http:// or https://."
          },
          "question": {
            "type": "string",
            "description": "The question to gather context for. If you need more details, request it in here."
          }
        },
        "required": [
          "url",
          "question"
        ]
      }
    },
    {
      "name": "FileSystemEnv_append_to_file",
      "description": "Append the file in the workspace with the content provided. Will automatically create the file if it does not exist. This function does not add \\n or any indentation in the front, and directly writes to the last line of the file. So please add \\n or indentation in front of the content if necessary. Please only write additional things, do not write what is already in the file.",
      "parameters": {
        "type": "object",
        "properties": {
          "filepath": {
            "type": "string",
            "description": "The path to the file to be saved, always use relative path to the workspace root."
          },
          "content": {
            "type": "string",
            "description": "The content to be appended."
          }
        },
        "required": [
          "filepath",
          "content"
        ]
      }
    },
    {
      "name": "FileSystemEnv_is_path_exist",
      "description": "Check if the path exists in the workspace.",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The path to be checked."
          }
        },
        "required": [
          "path"
        ]
      }
    },
    {
      "name": "FileSystemEnv_modify_file",
      "description": "Modify the file in the workspace based on the line changes provided. \nExample:\n```\nmodify_file('test.txt', 0, 1, 'Hello World!')\n```\nThis will modify the first line of the file `test.txt` to `Hello World!`. It's recommended that you first call read_from_file function and then call modify_file. filepath[begin_line:end_line+1] = new_content",
      "parameters": {
        "type": "object",
        "properties": {
          "filepath": {
            "type": "string",
            "description": "The path to the file to be modified."
          },
          "begin_line": {
            "type": "int",
            "description": "The starting line number of the content to be modified."
          },
          "end_line": {
            "type": "int",
            "description": "The ending line number of the content to be modified."
          },
          "new_content": {
            "type": "string",
            "description": "The new content to be replaced with the old content."
          }
        },
        "required": [
          "filepath",
          "begin_line",
          "end_line",
          "new_content"
        ]
      }
    },
    {
      "name": "FileSystemEnv_print_filesys_struture",
      "description": "Return a tree-like structure for all files and folders in the workspace. Use this tool if you are not sure what files are in the workspace.\nThis function recursively walks through all the directories in the workspace\nand return them in a tree-like structure, \ndisplaying all the files under each directory.\n\nExample:\n```\n- root/\n    - sub_directory1/\n        - file1.txt\n        - file2.txt\n    - sub_directory2/\n        - file3.txt\n```",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "FileSystemEnv_read_from_file",
      "description": "Open and read the file content in the workspace, you will see the content of the target file.",
      "parameters": {
        "type": "object",
        "properties": {
          "filepath": {
            "type": "string",
            "description": "The path to the file to be opened."
          },
          "begin_line": {
            "type": "int",
            "description": "The starting line number of the content to be opened. Defaults to 0."
          },
          "max_read_lines": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "filepath"
        ]
      }
    },
    {
      "name": "FileSystemEnv_write_to_file",
      "description": "Write the file in the workspace with the content provided. Will automatically create the file if it does not exist. Also overwrite the file content if it already exists. Better check if the file exists before directly writing to it.",
      "parameters": {
        "type": "object",
        "properties": {
          "filepath": {
            "type": "string",
            "description": "The path to the file to be saved, always use relative path to the workspace root."
          },
          "content": {
            "type": "string",
            "description": "The content to be saved."
          }
        },
        "required": [
          "filepath",
          "content"
        ]
      }
    },
    {
      "name": "ShellEnv_read_stdout",
      "description": "Read the stdout stream of the shell. If stderr is not empty, it will be returned instead.\nEmpty string will be returned if both stdout and stderr are empty.\nYou can use this function to check if the shell has new content to be read for a running process takes a while.",
      "parameters": {
        "type": "object",
        "properties": {
          "probe": {
            "type": "boolean",
            "description": "If `True`, the function will return immediately if no output is ready, else it will raise `OutputNotReady` exception and request to call functions in `next_calling` to get result."
          }
        },
        "required": []
      }
    },
    {
      "name": "ShellEnv_write_stdin",
      "description": "Write the stdin stream of the shell and get instant feedback from stderr or stdout.\nExample:\n```\nwrite_stdin('echo \"hello world\"')\n```\nThis will execute the command `echo \"hello world\"` in shell and return the output `hello world`.",
      "parameters": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content to be written."
          }
        },
        "required": [
          "content"
        ]
      }
    },
    {
      "name": "run_interpreter",
      "description": "The code interpreter tool that runs code and return the output.\nThe `code` will be written to file `filename` and the `command` will be executed in a shell.\nExample:\n```\nrun_interpreter(code='print(\"hello world\")',command='python code.py')\n```",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code to be written, default to `None`, which means no code will be written to file."
          },
          "command": {
            "type": "string",
            "description": "The shell command to be executed should avoid requiring additional user input, default to `python {filename}`."
          },
          "filename": {
            "type": "string",
            "description": "The filename to be written in mode `w`, default to `code.py`."
          }
        },
        "required": []
      }
    },
    {
      "name": "bing_search",
      "description": "Return 3 most relevant results of a Bing search using the official Bing API. This tool does not provide website details, use other tools to browse website if you need.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The search query."
          }
        },
        "required": [
          "query"
        ]
      }
    }
  ]
}